# Database Connection
address = 'f19server.apan5310.com'
port = '50208'
username = 'postgres'
password = 'sir8k23k'
dbname = 'Team8'
postgres_str = ('postgresql://{username}:{password}@{ipaddress}:{port}/{dbname}'.format(username=username,password=password,ipaddress=address,port=port,dbname=dbname))

# Create an engine that connects to PostgreSQL server
cnx = create_engine(postgres_str)

# Establish the connection
connection = cnx.connect()

# Building the tables
stmt='''
Create table country(
    country_code integer,
    country_name varchar(200) not null,
    Primary key (country_code)
);

Create table provstate(
    provstate_code integer,
    provstate varchar(200) not null,
    Primary key(provstate_code)
);

Create table city(
    city_code integer,
    city_name varchar(200) not null,
    Primary key(city_code)
);

Create table region(
    region_code integer,
    region_name varchar(200) not null,
    Primary key (region_code)
);

Create table location(
    country_code integer,
    region_code integer,
    provstate_code integer,
    city_code integer,
    Primary key(country_code,region_code,provstate_code,city_code) 
    , FOREIGN KEY (country_code) REFERENCES country (country_code)
        ON UPDATE CASCADE ON DELETE CASCADE
    , FOREIGN KEY (region_code) REFERENCES region (region_code)
        ON UPDATE CASCADE ON DELETE CASCADE
    , FOREIGN KEY (provstate_code) REFERENCES provstate (provstate_code)
        ON UPDATE CASCADE ON DELETE CASCADE
    , FOREIGN KEY (city_code) REFERENCES city (city_code)
        ON UPDATE CASCADE ON DELETE CASCADE
);

Create table propertyextent(
    propextent integer,
    description varchar(200) not null,
    Primary key(propextent)
);

Create table events(
    eventid bigint,
    Date timestamp,
    extended integer, 
    city_code integer, 
    pers integer, 
    icipla integer,
    oihl integer,
    multiple integer,
    success integer,
    suicide integer,
    nperps integer,
    nperpcap integer,
    nkill integer,
    nkillus integer,
    nkillter integer,
    property integer, 
    propextent integer,
    Primary Key (eventid)
    , FOREIGN KEY (city_code) REFERENCES city (city_code)
        ON UPDATE CASCADE ON DELETE CASCADE
    , FOREIGN KEY (propextent) REFERENCES propertyextent(propextent)
        ON UPDATE CASCADE ON DELETE CASCADE
    ,CHECK (extended IN (0,1))
    ,CHECK (PERS IN (0,1))
    ,CHECK (ICIPLA IN (0,1))
    ,CHECK (OIHL IN (0,1))
    ,CHECK (multiple IN (0,1))
    ,CHECK (success IN (0,1))
    ,CHECK (suicide IN (0,1))
    ,CHECK (suicide IN (0,1,-9))
);

Create table attack_type(
    attack_type_id integer,
    attack_type_txt varchar(100) not null,
    Primary key (attack_type_id)
);

Create table event_attack_type(
    eventid bigint,
    attack_type_id integer,
    Primary key(eventid,attack_type_id)
    , FOREIGN KEY (eventid) REFERENCES events (eventid)
        ON UPDATE CASCADE ON DELETE CASCADE
    , FOREIGN KEY (attack_type_id) REFERENCES attack_type (attack_type_id)
        ON UPDATE CASCADE ON DELETE CASCADE
);

Create table target_type(
    target_type_id integer,
    target_type_txt varchar(100) not null,
    Primary key (target_type_id)
);

Create table event_target_type(
    eventid bigint,
    target_type_id integer,
    Primary Key(eventid,target_type_id)
    , FOREIGN KEY (eventid) REFERENCES events (eventid)
        ON UPDATE CASCADE ON DELETE CASCADE
    , FOREIGN KEY (target_type_id) REFERENCES target_type (target_type_id)
        ON UPDATE CASCADE ON DELETE CASCADE
);


Create table gname(
    gname_id integer,
    gname_name varchar not null,
    primary key (gname_id)
);

Create table event_gname(
    eventid bigint,
    gname_id integer,
    Primary Key(eventid,gname_id)
    , FOREIGN KEY (eventid) REFERENCES events (eventid)
        ON UPDATE CASCADE ON DELETE CASCADE
    , FOREIGN KEY (gname_id) REFERENCES gname (gname_id)
        ON UPDATE CASCADE ON DELETE CASCADE
);

Create table weapon_type(
    weapon_type_id integer,
    weapon_type_name varchar(100) not null,
    Primary Key (weapon_type_id)
);

Create table event_weapon_type(
    eventid bigint,
    weapon_type_id integer,
    Primary Key(eventid,weapon_type_id)
    , FOREIGN KEY (eventid) REFERENCES events (eventid)
        ON UPDATE CASCADE ON DELETE CASCADE
    , FOREIGN KEY (weapon_type_id) REFERENCES weapon_type (weapon_type_id)
        ON UPDATE CASCADE ON DELETE CASCADE
);
'''
connection.execute(stmt)

# Load Python Packages & Load the Dataset into Python
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
df=pd.read_csv('/Users/Iris/Desktop/globalterrorismdb_0718dist.csv',encoding='ISO-8859-1')
len(df)
terror=pd.read_csv('/Users/Iris/Desktop/globalterrorismdb_0718dist.csv',encoding='ISO-8859-1')

# Data Preparation & Cleaning : Remove duplicate columns 
df1 = terror.drop(['attacktype2','attacktype2_txt','attacktype3','attacktype3_txt','targtype2','targtype2_txt','targtype3',
                   'targtype3_txt','gname2','gname3','weaptype2','weaptype2_txt','weaptype3','weaptype3_txt'],axis = 1)
df2 = terror.drop(['attacktype1','attacktype1_txt','attacktype3','attacktype3_txt','targtype1','targtype1_txt','targtype3',
                   'targtype3_txt','gname','gname3','weaptype1','weaptype1_txt','weaptype3','weaptype3_txt'],axis = 1)
df3 = terror.drop(['attacktype1','attacktype1_txt','attacktype2','attacktype2_txt','targtype1','targtype1_txt','targtype2',
                   'targtype2_txt','gname','gname2','weaptype1','weaptype1_txt','weaptype2','weaptype2_txt'],axis = 1)

# Rename Columns to avoid confusions
df1.rename(columns={"attacktype1": "attacktype", "attacktype1_txt": "attacktype_txt","targtype1":"targtype","targtype1_txt":"targtype_txt",
                    "weaptype1":"weaptype","weaptype1_txt":"weaptype_txt"},inplace = True)
df2.rename(columns={"attacktype2": "attacktype", "attacktype2_txt": "attacktype_txt","targtype2":"targtype","targtype2_txt":"targtype_txt",
                  "weaptype2":"weaptype","weaptype2_txt":"weaptype_txt","gname2":"gname"},inplace = True)
df3.rename(columns={"attacktype3": "attacktype", "attacktype3_txt": "attacktype_txt","targtype3":"targtype","targtype3_txt":"targtype_txt",
                  "weaptype3":"weaptype","weaptype3_txt":"weaptype_txt","gname3":"gname"},inplace = True)

# check the data length
len(df1) + len(df2) +len(df3)

# rbind data 
df = pd.concat([df1,df2,df3],axis = 0)

# rename columns with ambiguous column names
df.rename(columns={'crit1':'pers','crit2':'icipla','crit3':'oihl'}, inplace = True)

# Extra needed columns and clean data
df_needed = df[['eventid','iyear','imonth','iday','extended','pers','icipla','oihl','multiple','success','suicide',
                'attacktype','attacktype_txt','targtype','targtype_txt','weaptype','weaptype_txt','nperps','nperpcap',
                'nkill','nkillus','nkillter','property','propextent','propextent_txt','gname','country','country_txt','region','region_txt',
                'provstate','city']].drop_duplicates()

# Drop null values
df_needed = df_needed[~df_needed['attacktype'].isnull()]
df_needed = df_needed[~df_needed['targtype'].isnull()]
df_needed = df_needed[~df_needed['weaptype'].isnull()]
df_needed = df_needed[~df_needed['gname'].isnull()]

# generate a new csv
df_needed.to_csv ('/Users/Iris/Desktop/df_needed.csv')

# Combine day,month,year into one new column "time"
df=pd.DataFrame(df) 
df.imonth.unique()
df = df[df.imonth != 0]
df.iday.unique()
grouped=df.groupby('iday')['eventid'].count()
grouped
df = df[df.iday != 0]
from datetime import datetime
df['Date'] = df.apply(lambda row: datetime(row['iyear'], row['imonth'], row['iday']), axis=1)
# Clean data in the new column
df=df.drop(['iyear','imonth','iday'], axis=1)

# Create a combine column for Provstate and City
df = df[df.city != 'Unknown']
df = df[df.provstate != 'Unknown']
df['provstate_city'] = df['provstate'] + "_"+df['city']
# Create a combine column for Provstate and Country
df['provstate_country'] = df['country_txt'] + "_" +df['provstate']

# Table Country
# Drop duplicated data
clean_country=df[['country', 'country_txt']].drop_duplicates()
country_df=clean_country[['country', 'country_txt']].drop_duplicates()
country_df.head()
country_df.rename(columns={"country": "country_code", "country_txt": "country_name"},inplace = True)
len(country_df)
# load table country to database
country_df.to_sql(name='country', con=cnx, if_exists='append', index=False)

# Table Region
# Drop duplicated data
len(df[['region', 'region_txt']].drop_duplicates())
region_df=df[['region', 'region_txt']].drop_duplicates()
region_df.head()
region_df.rename(columns={"region": "region_code", "region_txt": "region_name"},inplace = True)
len(region_df)
# load table region to database
region_df.to_sql(name='region', con=cnx, if_exists='append', index=False)

# Table Provstate & Table City
# Drop null & duplicated data in provstate
df=df[~df['provstate'].isnull()]
len(df)
combination_country_provstate_df=df[['provstate','country_txt']].drop_duplicates()
# add incrementing integers
combination_country_provstate_df.insert(0, 'provstate_code', range(1, 1 + len(combination_country_provstate_df)))
# create a temporary dataframe
combination_country_provstate_df['provstate_country'] = combination_country_provstate_df['country_txt'] + "_" +combination_country_provstate_df['provstate']
# Map provstate_code to the main dataframe
provstate_code_list=[combination_country_provstate_df.provstate_code[combination_country_provstate_df.provstate_country==i].values[0] for i in df.provstate_country]
df.insert(0, 'provstate_code',provstate_code_list)   
# Drop null & duplicated data in city
df=df[~df['city'].isnull()]
len(df)
combination_provstate_city_df=df[['provstate','city']].drop_duplicates()
# add incrementing integers
combination_provstate_city_df.insert(0, 'city_code', range(1, 1 + len(combination_provstate_city_df)))
# create a temporary dataframe 
combination_provstate_city_df['provstate_city'] = combination_provstate_city_df['provstate'] + "_" +combination_provstate_city_df['city']
# Map city_code to the main dataframe
city_code_list=[combination_provstate_city_df.city_code[combination_provstate_city_df.provstate_city==i].values[0] for i in df.provstate_city]
df.insert(0, 'city_code',city_code_list)
# slice the city table from combination_country_provstate_df 
city=combination_provstate_city_df[['city_code','city']].drop_duplicates()
# rename columns
city=city.rename(columns={"city": "city_name"})
# load the city table to the database
city.to_sql(name='city', con=cnx, if_exists='append', index=False)
# slice the provstate table from combination_country_provstate_df
provstate=combination_country_provstate_df[['provstate_code','provstate']].drop_duplicates()
# load the provstate table to the database
provstate.to_sql(name='provstate', con=cnx, if_exists='append', index=False)

# table location
# slice the location table from the main dataframe
location=df[['city_code','country', 'region','provstate_code']]
location=location.drop_duplicates()
# rename columns in location table
location=location.rename(columns={"country": "country_code", "region": "region_code"})
# load the location table to the database
location.to_sql(name='location', con=cnx, if_exists='append', index=False)

# table propertyextent
# slice the propertyextent table from the main dataframe
propertyextent_df = df[['propextent','propextent_txt']]
# rename columns
propertyextent_df.rename(columns = {'propextent_txt':'description'}, inplace = True)
# drop na & drop duplicated data
propertyextent_df=propertyextent_df.dropna().drop_duplicates()
# load table propertyextent to the database
propertyextent_df.to_sql(name='propertyextent', con=cnx, if_exists='append', index=False)


# Table events
# Create "event" dataframe 
events= pd.DataFrame({'eventid': df['eventid'],
                        'date': df['Date'],
                        'extended': df['extended'],
                        'city_code': df['city_code'],
                        'pers': df['pers'],
                        'icipla': df['icipla'],
                        'oihl': df['oihl'],
                        'multiple': df['multiple'],
                        'success': df['success'],
                        'suicide': df['suicide'],
                        'nperps': df['nperps'],
                        'nperpcap': df['nperpcap'],
                        'nkill': df['nkill'],
                        'nkillus': df['nkillus'],
                        'nkillter': df['nkillter'],
                        'property': df['property'],
                        'propextent':df['propextent'],}).drop_duplicates()
# Load table events to database
events.to_sql(name='events', con=cnx, if_exists='append', index=False)

# Table weapon_type
# Create "weapon" dataframe with uniuqe weapon_type_name and drop N/A + duplicates
weapon_type_df = pd.DataFrame({'weapon_type_id': df['weaptype'], 'weapon_type_name': df['weaptype_txt']}).dropna().drop_duplicates()
# Load table weapon to database
weapon_type_df.to_sql(name='weapon_type', con=cnx, if_exists='append', index=False)


# Table event_weapon_type
# Create "event_weapon_type" dataframe with uniuqe customer_id and phone_id and drop N/A + duplicates
event_weapon_type_df = pd.DataFrame({'eventid': df['eventid'],
                                     'weapon_type_id': df['weaptype']}).dropna().drop_duplicates()
# Load table event_weapon_type to database
event_weapon_type_df.to_sql(name='event_weapon_type', con=cnx, if_exists='append', index=False)

# Table attack_type
attack_type_df = df[['attacktype', 'attacktype_txt']]
# rename
attack_type_df.rename(columns = {'attacktype':'attack_type_id', 'attacktype_txt':'attack_type_txt'}, inplace = True)
# drop duplicates
attack_type_df=attack_type_df.dropna().drop_duplicates()
# load Table attack_type to database
attack_type_df.to_sql(name='attack_type', con=cnx, if_exists='append', index=False)

# Table event_attack_type
event_attack_type_df = df[['eventid', 'attacktype']]
# Rename columns
event_attack_type_df.rename(columns = {'attacktype':'attack_type_id'}, inplace = True)
# drop duplicates
event_attack_type_df=event_attack_type_df.dropna().drop_duplicates() 
# load Table event_attack_type to database
event_attack_type_df.to_sql(name='event_attack_type', con=cnx, if_exists='append', index=False)

# Table target_type & Table event_target_type
df_event_target = df[['eventid','targtype']].dropna().drop_duplicates()
df_target = df[['targtype','targtype_txt']].dropna().drop_duplicates()
# Modify dataset target_type
df_target['targtype']= df_target['targtype'].astype(int)
df_target.rename(columns={"targtype": "target_type_id", "targtype_txt": "target_type_txt"},inplace = True)
# Modify dataset event_target
df_event_target.rename(columns={"targtype": "target_type_id"},inplace = True)
# load Table target_type to database
df_target.to_sql(name='target_type', con=cnx, if_exists='append', index=False)
# load Table event_target_type to database
df_event_target.to_sql(name='event_target_type', con=cnx, if_exists='append', index=False)

# Table gname
# Create temporary dataframe with unique gname
gname_df = pd.DataFrame(df.gname.unique(), columns=['gname'])
# Add incrementing integers for gname_id
gname_df.insert(0, 'gname_id', range(1, 1 + len(gname_df)))
#rename columns
gname_df.rename(columns = {'gname':'gname_name'}, inplace = True)
#drop duplicated data
gname_df=gname_df.dropna().drop_duplicates()
# load Table gname to database
gname_df.to_sql(name='gname', con=cnx, if_exists='append', index=False)

# clean the whole dataset again to make sure there is no duplicated data
df=df.dropna().drop_duplicates()

# Table event_gname
# Map
gname_id_list = [gname_df.gname_id[gname_df.gname_name == i].values[0] for i in df.gname]
# Add gname_id to the combined dataframe
df.insert(0, 'gname_id', gname_id_list)
# Slice table event_gname from the main dataframe
event_gname_df = df[['gname_id', 'eventid']]
# drop duplicated data
event_gname_df=event_gname_df.dropna().drop_duplicates()
# push table event_gname to database
event_gname_df.to_sql(name='event_gname', con=cnx, if_exists='append', index=False)

                           






